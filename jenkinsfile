pipeline {
    agent any  // 빌드를 실행할 에이전트 설정

    environment {
        ENV = credentials('env')
        APP_DEV = credentials('application-dev')
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        NGRAM_ANALYZER = credentials('ngram_analyzer')
        NORI_SETTINGS = credentials('nori-settings')
        NGRAM_SETTINGS = credentials('ngram-settings')
        HTTP_P12 = credentials('ea5d7380-c352-4001-8221-1f9e42b43bac')
        ELASTICSEARCH_CERT = credentials('elasticsearch-cert')    
    }

    stages {

        stage('Prepare Git Info') {
            steps {
                sh 'echo "Preparing Git Info..."'
                script {
                    env.GIT_AUTHOR_NAME = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                    env.GIT_AUTHOR_EMAIL = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                }
            }
        }

        stage('Checkout Code') {
            steps {
                sh 'echo "Checking out code from develop branch..."'
                // 소스 코드를 체크아웃하는 단계
                git branch: 'develop', 
                    url: 'https://lab.ssafy.com/s11-final/S11P31A407.git',
                    credentialsId: 'krca5876'
            }
        }

        stage('Prepare application-dev.yml') {
            steps {
                sh 'echo "Preparing application-dev.yml..."'
                sh 'mkdir -p back/fastats/src/main/resources/elasticsearch/settings'
                sh 'cp $APP_DEV back/fastats/src/main/resources/application-dev.yml'
            }
        }

        stage('Prepare ngram_analyzer.json') {
            steps {
                sh 'echo "Preparing ngram_analyzer.json..."'
                sh 'cp $NGRAM_ANALYZER back/fastats/src/main/resources/ngram_analyzer.json'
            }
        }

        stage('Prepare nori-settings.json') {
            steps {
                sh 'echo "Preparing nori-settings.json..."'
                sh 'cp $NORI_SETTINGS back/fastats/src/main/resources/nori-settings.json'
            }
        }

        stage('Prepare ngram-settings.json') {
            steps {
                sh 'echo "Preparing ngram-settings.json..."'
                sh 'cp $NGRAM_SETTINGS back/fastats/src/main/resources/ngram-settings.json'
            }
        }

        stage('Prepare ENV') {
            steps {
                sh 'echo "Writing .env file..."'
                dir('back/fastats/src/main/resources') {
                    writeFile file: '.env', text: env.ENV
                }
            }
        }

        // 버전 태그 생성 (예: 1.0-build-42)
        def versionTag = "1.0-build-${env.BUILD_NUMBER}"
        
        stage('Build Backend') {
            steps {
                dir('back/fastats') {
                    script {
                        
                        // Docker 이미지 빌드
                        sh "docker build -t thundercloud3/fastats:${versionTag} -f Dockerfile ."
                        
                        // 최신 태그도 함께 지정
                        sh "docker tag thundercloud3/fastats:${versionTag} thundercloud3/fastats:latest"
                    }
                }
            }
        }

        stage('Push Backend to Docker Hub') {
            steps {
                script {
                    // Docker Hub 로그인
                    sh 'docker login -u "$DOCKER_HUB_CREDENTIALS_USR" -p "$DOCKER_HUB_CREDENTIALS_PSW"'
                    // Docker Hub 이미지 푸시
                    sh "docker push thundercloud3/fastats:${versionTag}"
                }
            }
        }

        stage('Build Frontend'){
            steps {
                script {
                    dir('front/fast'){
                        // Docker 이미지 빌드
                        sh "docker build -t thundercloud3/front:${versionTag} -f Dockerfile ."

                        // 최신 태그도 함께 지정
                        sh "docker tag thundercloud3/front:${versionTag} thundercloud3/fastats:latest"
                    }
                }
            }
        }

        stage('Push Frontend to Docker Hub') {
            steps {
                script {
                    // Docker Hub 이미지 푸시
                    sh "docker push thundercloud3/front:${versionTag}"
                }
            }
        }
    }

    post {
        always {
            // 빌드가 끝난 후 항상 실행되는 단계 (예: 로그 정리, 알림 전송 등)
            echo 'Pipeline finished.'
            cleanWs()
        }
        success {
            script {
                mattermostSend(
                    color: 'good',
                    message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${env.GIT_AUTHOR_NAME}(${env.GIT_AUTHOR_EMAIL})\n(<${env.BUILD_URL}|Details>)",
                    endpoint: 'https://meeting.ssafy.com/hooks/xposbeoc73fdir44i6pt3433ee',
                    channel: '파자마'
                )
            }
        }
        failure {
            script {
                mattermostSend(
                    color: 'danger',
                    message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${env.GIT_AUTHOR_NAME}(${env.GIT_AUTHOR_EMAIL})\n(<${env.BUILD_URL}|Details>)",
                    endpoint: 'https://meeting.ssafy.com/hooks/xposbeoc73fdir44i6pt3433ee',
                    channel: '파자마'
                )
            }
        }
    }
}
